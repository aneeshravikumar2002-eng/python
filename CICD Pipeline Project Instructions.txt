CI/CD Pipeline for Flask Application using Jenkins, Docker, SonarQube, and Kubernetes
1. Project Overview

This project implements a Continuous Integration and Continuous Deployment (CI/CD) pipeline for a Flask application using Jenkins.
The pipeline automates:

Cloning code from GitHub

Building and pushing Docker images to Docker Hub

Running SonarQube code analysis

Deploying the application to a Kubernetes cluster

2. Technologies Used
Tool	  			Purpose
Jenkins				Automation Server for CI/CD
GitHub				Source Code Repository
Docker				Containerization Platform
Docker Hub			Container Image Registry
SonarQube			Code Quality Analysis
Kubernetes			Application Deployment and Scaling
Python (Flask)			Web Application Framework

3. Install Jenkins 
https://www.jenkins.io/doc/book/installing/linux/

3.1 Install Docker
https://docs.docker.com/engine/install/ubuntu/

3.2 Install SonarQube using Docker Compose:
3.2.1 Install Docker Compose:
https://docs.docker.com/compose/install/linux/
3.2.2 Docker Compose.yml file to create SonarQube with PostgreSQL
version: "3.9"

services:
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    depends_on:
      - db
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonarqube
      SONAR_JDBC_USERNAME: sonarqube
      SONAR_JDBC_PASSWORD: sonarpass
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    restart: always

  db:
    image: postgres:15
    container_name: sonarqube_db
    environment:
      POSTGRES_USER: sonarqube
      POSTGRES_PASSWORD: sonarpass
      POSTGRES_DB: sonarqube
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    restart: always

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql_data:

3.3 Initialize kubeadm cluster:
https://github.com/yeshwanthlm/Kubeadm-Installation-Guide.git

Access Jenkins in the browser:

http://<EC2-IP>:8080

4. Jenkins Plugin Installation

Navigate to Manage Jenkins → Plugins → Available plugins, then install:

Plugin					Purpose
Git Plugin				To clone Git repositories
Docker Pipeline				For Docker build/push
Kubernetes CLI Plugin			For kubectl integration
SonarQube Scanner Plugin		Code quality analysis
java                                    Programming Language
maven					For creating .WAR packages


After installation, restart Jenkins.


In Jenkins Dashboard, click “New Item” (top left).

1.Enter a job name
2.Select “Pipeline” and click OK.
3: Enable Remote Build Trigger
4.Then provide a unique authentication token, for example:flaskbuildtoken123
5.Define Pipeline Script Source

Scroll to the Pipeline section.

1: Use Jenkinsfile from GitHub Repository
Select Pipeline with SCM


Creating Credentials in Jenkins

Credentials in Jenkins are securely stored secrets that you can use in pipelines — such as usernames, passwords, tokens, or files — without hardcoding them in your Jenkinsfile.

In your CI/CD pipeline, you need three credentials:

Let’s configure each one in detail 

Step 1: Open Jenkins Credentials Manager

In your Jenkins dashboard, click on:

Manage Jenkins → Credentials → System → Global credentials (unrestricted)


Click on “Add Credentials” (left sidebar).

You’ll see a form where you can choose the credential type.

 Step 2: Docker Hub Credentials
 Why:

To authenticate Jenkins when pushing your Docker image to Docker Hub.

Steps:

Click Add Credentials

In the form:

Kind: Username with password

Scope: Global (for all pipelines)

Username: Your Docker Hub username

Password: Your Docker Hub password or access token

ID: dockerhub-login

Description: Docker Hub credentials for image push

Click Create 

This credential is used inside the Jenkinsfile here:

withCredentials([usernamePassword(credentialsId: 'dockerhub-login', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
    sh '''
        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
    '''
}


Step 3: Kubernetes Credential (kubeconfig)
 Why:

To give Jenkins access to your Kubernetes cluster for deployment.

Steps:

On your local machine or control node, locate your kubeconfig file:

cat /etc/kubernetes/admin/config > kubeconfig
using mobaxterm download the file to your local machine


In Jenkins, click Add Credentials again.

Fill out the form:

Kind: Secret file

Scope: Global

File: Upload your config file

ID: kubeconfig

Description: Kubernetes cluster configuration

Click Create 

Used in your Jenkinsfile here:

withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
    sh '''
        kubectl --kubeconfig=$KUBECONFIG apply -f k8s/deployment.yml
    '''
}

Step 4: SonarQube Token
Why:

To allow Jenkins to authenticate with your SonarQube server and perform static code analysis.

Steps:
In SonarQube:

Open SonarQube in your browser (http://<EC2-IP>:9000)

Log in as admin (default password: admin)

Go to My Account → Security → Generate Token

Name it (e.g., jenkins-token)

Copy the token — this is shown only once!


In Jenkins:

Go to Manage Jenkins → Credentials → System → Global credentials

Click Add Credentials

Fill in:

Kind: Secret text

Scope: Global

Secret: Paste your SonarQube token

ID: sonarqube-token (or any descriptive name)

Description: Token for SonarQube server

Click Create.


Configure Jenkins with SonarQube Server:

Go to Manage Jenkins → Configure System

Scroll to SonarQube servers

Click Add SonarQube

Fill:

Name: My SonarQube Server

Server URL: http://<EC2-IP>:9000

Server authentication token: choose the token credential you just added (sonarqube-token)

Click Apply and Save


Used in your Jenkinsfile:

withSonarQubeEnv('My SonarQube Server') {
    sh """
        ${scannerHome}/bin/sonar-scanner \
        -Dsonar.projectKey=python \
        -Dsonar.projectName='python' \
        -Dsonar.sources=.
    """
}
Click Apply → Save.Then Click Build.



